
1. Singleton pattern
Uloga Singleton paterna je da osigura da se klasa može instancirati samo jednom i da osigura
globalni pristup kreiranoj instanci klase. Postoji više objekata koje je potrebno samo jednom
instancirati i nad kojim je potrebna jedinstvena kontrola pristupa. Neki od njih su: thread
pools (skupina niti), objekti koji upravljaju setovanjem registara, objekti koji se koriste za
logiranje, objekti koji se koriste kao drajveri za razne uređaje kao što su printeri i grafičke
kartice. Instanciranje više nego jednom navedenih objekata mogu se prouzrokovati problemi
kao što su nekorektno ponašanje programa, neadekvantno korištenje resursa ili
nekonzistentan rezultat.

Primjer je koristenje klase BazaPodatakaHelper koja omogucava rad sa bazom i koristi instacu MobileService klase.

2. Prototype patern

Uloga Prototype paterna je da kreira nove objekte klonirajući jednu od postojećih prototip
instanci (postojeći objekat). Ako je trošak kreiranja novog objekta velik i kreiranje objekta je
resursno zahtjevno tada se vrši kloniranje već postojećeg objekata. Prototype dizajn patern
dozvoljava da se kreiraju prilagođeni objekti bez poznavanja njihove klase ili detalja kako je
objekat kreiran.

Pattern nije korišten, ali efikasnog istog bi se mogla iskoristiti kod pravljenja razlicitih instanci iz klase Osoba u projektu.

3. 
Uloga Factory Method paterna je da omogući kreiranje objekata na način da podklase odluče
koju klasu instancirati. Različite podklase mogu na različite načine implementirati interfejs.
Factory Method instancira odgovarajuću podklasu(izvedenu klasu) preko posebne metode na
osnovu informacije od strane klijenta ili na osnovu tekućeg stanja.

Ovaj pattern takodjer nije implementiran, ali u dijelu koji slijedi se moze jako fino iskoristiti kod prijava koje se 
budu slale. Na osnovu njih praviti vize, gdje se pomocu jedne metode mogu printati razlicite vize u odnosu na 
tip vize koja se trazi.